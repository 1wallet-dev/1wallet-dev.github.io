"use strict";(self.webpackChunkone_wallet=self.webpackChunkone_wallet||[]).push([[253],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=c(n),p=o,m=h["".concat(l,".").concat(p)]||h[p]||d[p]||a;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6064:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={sidebar_position:7},l=void 0,c={unversionedId:"Token-Tracking",id:"Token-Tracking",title:"Token-Tracking",description:"ONE Wallet tracks the wallet's ownership of tokens (EIP-20, 721, 1155) on the smart contract itself. This was first implemented in #52 then subsequently moved to an independent file as the main smart contract becomes too large.",source:"@site/docs/Token-Tracking.md",sourceDirName:".",slug:"/Token-Tracking",permalink:"/docs/Token-Tracking",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Token-Tracking.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"homeSidebar",previous:{title:"Smart-Contract-References",permalink:"/docs/Smart-Contract-References"},next:{title:"Tutorials",permalink:"/docs/Tutorials"}},u={},d=[{value:"Background",id:"background",level:3},{value:"Analysis",id:"analysis",level:3},{value:"ONE Wallet&#39;s Approach",id:"one-wallets-approach",level:3}],h={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"ONE Wallet tracks the wallet's ownership of tokens (EIP-20, 721, 1155) on the smart contract itself. This was first implemented in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/pull/52/files"},"#52")," then subsequently moved to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/7b8a94f22c171a20f3c980556b8a2e565fcebcf0/code/contracts/TokenTracker.sol"},"an independent file")," as the main smart contract becomes too large."),(0,a.kt)("h3",{id:"background"},"Background"),(0,a.kt)("p",null,"The approach taken by ONE Wallet is uncommon. Most wallets rely on tracking solutions off-chain. For example, MetaMask asks users to manually add the contract address of each token, only then the wallet would check the balance of the token, recognize the user's ownership, and allow operations on the tokens, if the user holds any balance for that token. Some other wallets rely on APIs provided by some centralized index servers. For example, Etherscan provides public APIs for tracking ERC-20 and NFT (both ERC-721 and 1155) tokens. OpenSea provides more comprehensive APIs for tracking NFTs, including the information about the token contract itself, the distribution of token owners for any token, and each user's list of owned token assets. Wallets such as Coinbase Wallet and TrustWallet rely on such APIs to automatically lookup and update user's token ownerships and balances. However, such APIs have limitations and often has undocumented, non-standard customizations. For example, OpenSea's API retrieve token contract's information only once. It ignores subsequent updates on metadata and/or name and symbols. The API server also caches image and video data that are provided in token metadata, and stores downsampled versions on centralized storage services (Google Storage). Only the cached versions are served via the API, the original, raw metadata became hidden from API user. Moreover, the APIs uses non-standard contract interface to retrieve name, symbol, and contract metadata on ERC-721 and ERC-1155 contracts."),(0,a.kt)("h3",{id:"analysis"},"Analysis"),(0,a.kt)("p",null,"Nonetheless, reliance on these APIs are not unreasonable. On Ethereum, the gas cost is high. Many solutions already exist for tracking tokens off-chain, though they maintained by relatively few centralized operators. In our view, wallets on Ethereum rely on those centralized API servers for two primary reasons:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Most wallets are not smart contract wallets. They are client-side based so they have to use those APIs. "),(0,a.kt)("li",{parentName:"ul"},"Smart contract wallets need to stay competitive. The gas cost of smart contract wallet was already a key issue on Ethereum. Incurring extra cost on receiving / sending tokens for the sole purpose of tracking tokens would seem unnecessary, and may lead to a loss on the user base if competitors's wallets are cheaper to operate. ")),(0,a.kt)("h3",{id:"one-wallets-approach"},"ONE Wallet's Approach"),(0,a.kt)("p",null,"Here, ONE Wallet faces a very different set of settings. Since ONE Wallet is running on Harmony network exclusively at this time, it does not have similar constraints on gas cost. The gas cost for tracking tokens is nearly negligible and will very likely stay so, given the high efficiency of the blockchain. On the other hand, Harmony network does not have established central operators offering APIs for tracking tokens. Existing solutions, such as ",(0,a.kt)("a",{parentName:"p",href:"https://explorer.harmony.one/"},"Harmony Block Explorer"),", does poorly on tracking arbitrary tokens and does not seem to be tracking EIP-721 and 1155 tokens correctly (",(0,a.kt)("a",{parentName:"p",href:"https://explorer.harmony.one/address/0x6c01e9fd32da6afc9673d8aeb795be320e0d2961"},"example"),"). "),(0,a.kt)("p",null,"Even if there were reliable APIs offered by central operators, tracking tokens on-chain would still provide far superior user experience. Based on our implementation (see above), tracking immediate occur when the user receive a EIP-721 or 1155 token, or when the user sends a EIP-20 token. The user is not required to wait or take any action for this to occur. The tracking implementation only uses very few bytes per token. For each token, it stores the token id (32 bytes), token contract address (20 bytes), and token type (1 byte), and computes a 32-byte key based on these three components. "),(0,a.kt)("p",null,"The benefits are clear: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"when the user restore their wallets at a different client (or device), the client automatically restore the list of tokens being tracked by obtaining a copy from the smart contract. In comparison, users of other wallets would have to add each token back one-by-one. "),(0,a.kt)("li",{parentName:"ul"},"Most importantly, when recovery is triggered, ONE Wallet can send all tokens owned by the user to the recovery address, not just ONEs.")),(0,a.kt)("p",null,"It is also important to note that the tracking does not need to be robust or 100% correct. The tracking mechanism only tracks which tokens are of interest to the wallet user. It does not track the balance. The tracking is guaranteed not to miss a token (except EIP-20 tokens which the wallet only received but never sends out). They client should retrieve the balance of each token by querying the blockchain. The client can also add or subtract any token from the tracking list as the client sees fit. The smart contract also provides interfaces for the user to add, subtract, override the tracking list if they wish to."))}p.isMDXComponent=!0}}]);