"use strict";(self.webpackChunkone_wallet=self.webpackChunkone_wallet||[]).push([[839],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var r=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),h=o,f=u["".concat(s,".").concat(h)]||u[h]||d[h]||n;return a?r.createElement(f,l(l({ref:t},p),{},{components:a})):r.createElement(f,l({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,l=new Array(n);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<n;c++)l[c]=a[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6353:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var r=a(7462),o=a(3366),n=(a(7294),a(3905)),l=["components"],i={sidebar_position:9},s=void 0,c={unversionedId:"Web-Client:-Data-Stored-Locally",id:"Web-Client:-Data-Stored-Locally",title:"Web-Client:-Data-Stored-Locally",description:"Partial proofs",source:"@site/docs/Web-Client:-Data-Stored-Locally.md",sourceDirName:".",slug:"/Web-Client:-Data-Stored-Locally",permalink:"/docs/Web-Client:-Data-Stored-Locally",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Web-Client:-Data-Stored-Locally.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"homeSidebar",previous:{title:"Tutorials",permalink:"/docs/Tutorials"}},p={},d=[{value:"Partial proofs",id:"partial-proofs",level:2},{value:"Access to partial proofs",id:"access-to-partial-proofs",level:3},{value:"Example of using partial proofs",id:"example-of-using-partial-proofs",level:3},{value:"States",id:"states",level:2},{value:"Restoration",id:"restoration",level:2}],u={toc:d};function h(e){var t=e.components,a=(0,o.Z)(e,l);return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"partial-proofs"},"Partial proofs"),(0,n.kt)("p",null,"1wallet web client stores partial proofs for completing transactions in the browser's ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB"},"IndexedDB"),'. The proofs are considered "partial" because they can only be completed and used for authorizing transactions, if and only if the user provides the correct authenticator code(s) (6-digit or 12-digit OTPs). The proofs are made robust against brute-force using techniques described in ',(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/wiki/Client-Security"},"Client Security"),". The proofs are the OTP Merkle Tree described in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/wiki#otp-merkle-tree"},"Wiki"),(0,n.kt)("sup",null,"[1]")),(0,n.kt)("p",null,"[1]",": not exactly - we will update the Wiki later to describe the improvements and revisions we made during the implementation)."),(0,n.kt)("h3",{id:"access-to-partial-proofs"},"Access to partial proofs"),(0,n.kt)("p",null,"These partial proofs are managed via a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/client/src/storage/index.js"},"storage interface")," using ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/localForage/localForage"},"localforage"),". Each wallet stores a key-value pair to the storage. The key corresponds to the root parameter of a wallet, which uniquely identifies the wallet and maps to a Google Authenticator entry. The values are the partial proofs, represented by an array of byte arrays (Uint8Array[]). Each array represents a layer in the OTP Merkle Tree, starting from the leaves at index 0 and followed by one layer above the leaves at index 1, and so on. Each proof is 32-byte long. For a wallet with lifespan of a year, about 64MB of proofs are stored, with the leaves occupying about 32MB."),(0,n.kt)("p",null,'When the wallet is upgraded, the address of the wallet "changes" (a new wallet is generated and the old wallet starts to forward everything to the new wallet), but its root parameter remains unchanged. As a result, the user could still use the same Google Authenticator entry to authorize transactions for the wallet, and we do not need to update anything in the storage for the partial proofs of the wallet. For'),(0,n.kt)("h3",{id:"example-of-using-partial-proofs"},"Example of using partial proofs"),(0,n.kt)("p",null,"Every transaction in 1wallet requires completing a commit-reveal process. The partial proofs are loaded at the beginning of this process. See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/lib/api/flow.js#L71"},"/code/lib/api/flow.js:L71"),". Note that even though the entire 64MB proofs are loaded, only a 32-byte chunk of the 32MB worth of leaves is used, followed by its ancestors (about 20). The position of the leaf used is based on the current time and/or operation type. This means we can store and access the proofs more efficiently and securely in the future. Right now, read and write to the proofs have negligible performance impact (<0.2 seconds on a 2014 iMac computer, based on ",(0,n.kt)("inlineCode",{parentName:"p"},"/benchmark"),")."),(0,n.kt)("h2",{id:"states"},"States"),(0,n.kt)("p",null,"In addition to the partial proofs, 1wallet also stores the state of each wallet via Redux. See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/client/src/state/store.js"},"/code/client/src/store.js"),". The Redux store is also backed by localforage using IndexedDB, albeit under a separate index. See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/client/src/state/rootReducer.js"},"code/client/src/state/rootReducer.js"),". The layout of the state and the default values are shown in the reducer for wallets. See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/client/src/state/modules/wallet/reducers.js"},"/code/client/src/state/modules/wallet/reducers.js"),". Note that the specific details for each key-value in the ",(0,n.kt)("inlineCode",{parentName:"p"},"state.wallet")," object is not given in the default value, though the actions provide some guidance on what is generally expected. Please search and consult with usages of ",(0,n.kt)("inlineCode",{parentName:"p"},"useSelector(state => state.wallet...)")," in the project for more information, as well as ",(0,n.kt)("inlineCode",{parentName:"p"},"dispatch(walletActions.updateWallet(...))"),". "),(0,n.kt)("p",null,"For example, the wallet creation component provides rich information about the meaning of each field in each wallet. See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/client/src/pages/Create.jsx#L219"},"/code/client/src/pages/Create.jsx#L219"),"."),(0,n.kt)("p",null,"The address input component provides rich information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"knownAddresses")," object. See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/client/src/components/AddressInput.jsx#L162"},"/code/client/src/components/AddressInput.jsx#L162")),(0,n.kt)("h2",{id:"restoration"},"Restoration"),(0,n.kt)("p",null,"All partial proofs and states can be regenerated using the Google Authenticator seed (represented as a QR code) and public information on the blockchain. Try it at ",(0,n.kt)("a",{parentName:"p",href:"https://1wallet.crazy.one/restore"},"https://1wallet.crazy.one/restore"),", and see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/blob/1ccc4efb5a94476a5adb4594bcbed9300ce0237a/code/client/src/pages/Restore.jsx"},"/code/client/src/pages/Restore.jsx")," for more information."))}h.isMDXComponent=!0}}]);