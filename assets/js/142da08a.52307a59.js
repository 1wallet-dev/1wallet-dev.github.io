"use strict";(self.webpackChunkone_wallet=self.webpackChunkone_wallet||[]).push([[522],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(a),h=r,m=c["".concat(o,".").concat(h)]||c[h]||u[h]||l;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1097:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],s={sidebar_position:2},o="1wallet App Integration",d={unversionedId:"App-Integration",id:"App-Integration",title:"1wallet App Integration",description:"Currently, 1wallet supports app integration via in-browser redirect or embedded iframe (explained below). Demo code is available at https//onewallet-integration.web.app/.",source:"@site/docs/App-Integration.md",sourceDirName:".",slug:"/App-Integration",permalink:"/docs/App-Integration",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/App-Integration.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"homeSidebar",previous:{title:"home",permalink:"/docs/home"},next:{title:"Call-for-Developers",permalink:"/docs/Call-for-Developers"}},p={},u=[{value:"Redirect",id:"redirect",level:2},{value:"Base URL",id:"base-url",level:3},{value:"Common Request Parameters",id:"common-request-parameters",level:3},{value:"Common Callback Parameters",id:"common-callback-parameters",level:3},{value:"Connect",id:"connect",level:3},{value:"Request Parameters",id:"request-parameters",level:4},{value:"Callback Parameters",id:"callback-parameters",level:4},{value:"Screenshots",id:"screenshots",level:4},{value:"Payment Request",id:"payment-request",level:3},{value:"Request Parameters",id:"request-parameters-1",level:4},{value:"Callback Parameters",id:"callback-parameters-1",level:4},{value:"Screenshots",id:"screenshots-1",level:4},{value:"Select wallet and pay",id:"select-wallet-and-pay",level:5},{value:"Cannot find specified wallet",id:"cannot-find-specified-wallet",level:5},{value:"Pay from specific address",id:"pay-from-specific-address",level:5},{value:"User authorizing payment with authenticator code",id:"user-authorizing-payment-with-authenticator-code",level:5},{value:"Call Request",id:"call-request",level:3},{value:"Request Parameters",id:"request-parameters-2",level:4},{value:"Callback Parameters",id:"callback-parameters-2",level:4},{value:"Screenshots",id:"screenshots-2",level:4},{value:"Request Details",id:"request-details",level:5},{value:"User Authorizing Request",id:"user-authorizing-request",level:5},{value:"Signing Request",id:"signing-request",level:3},{value:"Request Parameters",id:"request-parameters-3",level:4},{value:"Callback Parameters",id:"callback-parameters-3",level:4},{value:"Screenshots",id:"screenshots-3",level:4},{value:"Request Details",id:"request-details-1",level:5},{value:"User Authorizing Request",id:"user-authorizing-request-1",level:5}],c={toc:u};function h(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"1wallet-app-integration"},"1wallet App Integration"),(0,l.kt)("p",null,"Currently, 1wallet supports app integration via in-browser redirect or embedded iframe (explained below). Demo code is available at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hypnagonia/1wallet-integration-demo"},"https://github.com/hypnagonia/1wallet-integration-demo"),". The demo app is hosted at ",(0,l.kt)("a",{parentName:"p",href:"https://onewallet-integration.web.app/"},"https://onewallet-integration.web.app/"),". "),(0,l.kt)("p",null,"Several other integration methods are being evaluated and implemented. Some of them are discussed in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/polymorpher/one-wallet/issues/73"},"#73"),". We are also planning to add integrations to common libraries such as via a web3 provider. Note that, since 1wallet requires the user to provide 6-digit (or 12-digit) code from the authenticator for every transaction, the integration flow would require the user to do so at some point in the 1wallet UI. "),(0,l.kt)("p",null,"This should not be a problem for most apps that work by sending a request to the wallet (i.e. MetaMask) for every transaction. But for a small category of apps that intend to act a wallet (typically by getting a copy of the user's private key and initialize a wallet instance in the app), it should be understood that the same thing cannot be done with 1wallet. There is no private key, so there is nothing to load. The local data stored by 1wallet is 64MB, so passing it into your app would be non-trivial if your app intends to act as a wallet."),(0,l.kt)("h2",{id:"redirect"},"Redirect"),(0,l.kt)("p",null,"The simplest way to support 1wallet with your app is through redirect integration. Using this method, your app will need to redirect the user to a URL similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"https://1wallet.crazy.one/auth/[action]?[params=values]"),", where ",(0,l.kt)("inlineCode",{parentName:"p"},"action")," and its corresponding ",(0,l.kt)("inlineCode",{parentName:"p"},"params")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"values")," are one of the following. The redirect could be through a new browser tab, or a pop up window, so the user does not need to leave your app to complete the flow. The user will have a chance to review your request at their 1wallet UI, and make a decision on whether they would approve or reject your request. In either case, the user would be redirected back to your app at a callback URL you specified in ",(0,l.kt)("inlineCode",{parentName:"p"},"params")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"values"),". The state of your request (e.g. approved / rejected, transaction id, user wallet address, and others) will be passed to the the callback URL.  "),(0,l.kt)("h3",{id:"base-url"},"Base URL"),(0,l.kt)("p",null,"Unless otherwise specified, all APIs should have the base URL ",(0,l.kt)("inlineCode",{parentName:"p"},"https://1wallet.crazy.one/auth")," prepended to the routes. For example, the URL for ",(0,l.kt)("inlineCode",{parentName:"p"},"connect")," would be ",(0,l.kt)("inlineCode",{parentName:"p"},"https://1wallet.crazy.one/auth/connect"),". All requests are ",(0,l.kt)("inlineCode",{parentName:"p"},"GET")," requests. Parameters and values are passed in as query strings. e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"https://1wallet.crazy.one/auth/connect?caller=Bob&callback=..."),"."),(0,l.kt)("h3",{id:"common-request-parameters"},"Common Request Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"caller"),": URL encoded string (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"Tip%20Jar"),"), the name of the app that made the request."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"callback"),": Base64 encoded string, the callback URL which the user would be redirected back to, after they made a decision on whether to approve or reject the request. Example: ",(0,l.kt)("inlineCode",{parentName:"li"},"aHR0cHM6Ly9nb29nbGUuY29t")," (decodes to ",(0,l.kt)("inlineCode",{parentName:"li"},"https://google.com"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"network"),': (optional) the network the app intends to use. Must be one of "harmony-mainnet" or "harmony-testnet". In local testing environment you may use "eth-ganache" as well, provided that a local relayer and web client are running with ganache enabled.')),(0,l.kt)("p",null,"For address-like parameters, hexidecimal checksum is expected (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"0x37CCbeAa1d176f77227AEa39BE5888BF8768Bf85"),") unless otherwise specified. Addresses in bech32 and hexidecimal lowercase formats are also supported, but are not advised."),(0,l.kt)("p",null,"All parameters are required, unless otherwise specified as ",(0,l.kt)("strong",{parentName:"p"},"(optional)"),"."),(0,l.kt)("h3",{id:"common-callback-parameters"},"Common Callback Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"success"),": 0 or 1, indicates whether the user has rejected (0) or approved (1) the request from the app.")),(0,l.kt)("h3",{id:"connect"},"Connect"),(0,l.kt)("p",null,"Allows the app to retrieve a 1wallet address owned by the user. Note that, this endpoint does not verify ownership. Technically the user can spoof an address and call the callback URL with any address they want. If your app needs verification of address ownership, you should consider sending a Payment Request or Signing Request (see below sections)."),(0,l.kt)("p",null,"Endpoint: ",(0,l.kt)("inlineCode",{parentName:"p"},"/connect")),(0,l.kt)("h4",{id:"request-parameters"},"Request Parameters"),(0,l.kt)("p",null,"None (only common parameters are used)"),(0,l.kt)("h4",{id:"callback-parameters"},"Callback Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"address"),": the address of the wallet the user chooses to connect with")),(0,l.kt)("h4",{id:"screenshots"},"Screenshots"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/auth-connect.png",alt:null})),(0,l.kt)("h3",{id:"payment-request"},"Payment Request"),(0,l.kt)("p",null,"Allows the app to ask the user to send payment to a specific address. The app may optionally specify an address which the user must make the payment from. The payment may be in the form of tokens (ERC-20, ERC-721, ERC-1155)."),(0,l.kt)("p",null,"Endpoint: ",(0,l.kt)("inlineCode",{parentName:"p"},"/pay")),(0,l.kt)("h4",{id:"request-parameters-1"},"Request Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"amount"),": the amount requested, in wei or otherwise lowest divisible unit (if a payment using a token is requested). Example: ",(0,l.kt)("inlineCode",{parentName:"li"},"1000000000000000000")," (=1.0 ONE)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dest"),": the address you want the user to make payment to."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": (optional) the address of the user's wallet which the payment ",(0,l.kt)("strong",{parentName:"li"},"must be")," made from. If the user does not have this 1wallet address, the request cannot proceed (thus the user must reject the request). If this parameter is unspecified, the user would be allowed to pick any 1wallet address they own to complete the payment request.")),(0,l.kt)("p",null,"At this time, payment by token is not supported, but they will be added very soon. You will need to provide the token's contract address in the parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenContractAddress"),". If the token is an NFT, you will also need to specify token ID in ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenId")," and token type (ERC721 or ERC1155) in ",(0,l.kt)("inlineCode",{parentName:"p"},"tokenType"),"."),(0,l.kt)("h4",{id:"callback-parameters-1"},"Callback Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"txId"),": the transaction id of the payment. The app should verify whether the transaction was successful and whether payment was received. Since a 1wallet does not revert unless the user provides invalid proof (authenticator codes and local partial proofs), you should check the internal calls of the transaction and determine whether the internal call that actually sends the funds was successful and indeed delivered the specified amount of funds to the destination address. Errors are emitted as events. The easiest way to ensure the transaction was successful is to check balances on the destination address.")),(0,l.kt)("h4",{id:"screenshots-1"},"Screenshots"),(0,l.kt)("h5",{id:"select-wallet-and-pay"},"Select wallet and pay"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/auth-pay-any-wallet.png",alt:null})),(0,l.kt)("h5",{id:"cannot-find-specified-wallet"},"Cannot find specified wallet"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/auth-pay-bad-address.png",alt:null})),(0,l.kt)("h5",{id:"pay-from-specific-address"},"Pay from specific address"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/auth-pay-specific-address.png",alt:null})),(0,l.kt)("h5",{id:"user-authorizing-payment-with-authenticator-code"},"User authorizing payment with authenticator code"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/auth-pay-specific-address-next.png",alt:null})),(0,l.kt)("h3",{id:"call-request"},"Call Request"),(0,l.kt)("p",null,"Allows the app to ask the user to call a function at a specific contract address using their 1wallet, and optionally send payment to that contract (via the function, which must be payable in this case). The caller (i.e msg.sender) of that function will be the user's 1wallet address. "),(0,l.kt)("p",null,"The function, parameters, and contract address will be shown to the user. The app may provide a human-readable comment to explain to the user what it is trying to do. "),(0,l.kt)("h4",{id:"request-parameters-2"},"Request Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"calldata"),": a base64 encoded stringified JSON object describing the calldata",(0,l.kt)("sup",null,(0,l.kt)("a",null,(0,l.kt)("a",{parentName:"li",href:"#f1"},"1"))),". The JSON object has three fields:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"method"),": a string, corresponds to the function's signature, for example, ",(0,l.kt)("inlineCode",{parentName:"li"},"commit(bytes32,bytes32,bytes32)")," is the signature for the smart contract function ",(0,l.kt)("inlineCode",{parentName:"li"},"function commit(bytes32 hash, bytes32 paramsHash, bytes32 verificationHash) external"),";"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parameters"),": an array of name-value pairs correspond to the parameters of the called function. Using above example, the parameters could be ",(0,l.kt)("inlineCode",{parentName:"li"},'[{"name":"hash", "value":"0x1234..."},{"name":"paramsHash", "value":"0xffff..."},{"name":"verificationHash", "value":"0xffff..."}]')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"comment"),": (optional) a string, provides a human-readable explanation to show the user what you are asking for."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"dest"),": the address of the contract you want to call."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"amount"),": (optional) the amount you want the user to pay to the contract at the same time, in wei. Example: ",(0,l.kt)("inlineCode",{parentName:"li"},"1000000000000000000")," (=1.0 ONE). If the amount is non-zero, the ",(0,l.kt)("inlineCode",{parentName:"li"},"method")," on the ",(0,l.kt)("inlineCode",{parentName:"li"},"dest")," contract must be payable, otherwise the call would be reverted by the ",(0,l.kt)("inlineCode",{parentName:"li"},"dest")," contract, even though the 1wallet transaction itself would still be successful (while emitting a log indicating the ",(0,l.kt)("inlineCode",{parentName:"li"},"dest")," contract reverted).  "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": (optional) the address of the user's 1wallet which the call ",(0,l.kt)("strong",{parentName:"li"},"must be")," made from. If the user does not have this 1wallet address, the request cannot proceed (thus the user must reject the request). If this parameter is unspecified, the user would be allowed to pick any 1wallet address they own to complete the payment request.")),(0,l.kt)("a",{name:"f1"},"[1]")," Here is an example of `calldata`: `eyJtZXRob2QiOiJyZW5ldyh1aW50MzIsYnl0ZXM0KSIsInBhcmFtZXRlcnMiOlt7Im5hbWUiOiJwZXJpb2QiLCJ2YWx1ZSI6MX0seyJuYW1lIjoic2lnbmF0dXJlIiwidmFsdWUiOiIweDEyMzQ1Njc4In1dLCJjb21tZW50IjoidGVzdGluZyJ9`",(0,l.kt)("h4",{id:"callback-parameters-2"},"Callback Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"txId"),": the transaction id of the call. The app should verify whether the call was successful and whether payment was received. 1wallet does not revert a transaction unless the user provides invalid proof. You should check the internal calls of the transaction, find the related external calls, and determine whether the calls are successful. Two types of events can be emitted from the call. See ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/polymorpher/one-wallet/blob/daa1c1fca2c63c11f2252c871752bfdeb052e72a/code/contracts/ONEWallet.sol#L513"},"code")," for more information: ",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"event ExternalCallCompleted(address contractAddress, uint256 amount, bytes data, bytes ret)"),": here, ",(0,l.kt)("inlineCode",{parentName:"li"},"data")," is the ABI encoded data (with function signatures and parameters) for the call, and ",(0,l.kt)("inlineCode",{parentName:"li"},"ret")," is the raw data returned by the call in ABI encoded bytes format, according to ",(0,l.kt)("a",{parentName:"li",href:"https://docs.soliditylang.org/en/v0.8.4/abi-spec.html#function-selector-and-argument-encoding"},"ABI specification"),". "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"event ExternalCallFailed(address contractAddress, uint256 amount, bytes data, bytes ret)"),": the format is same as above")))),(0,l.kt)("h4",{id:"screenshots-2"},"Screenshots"),(0,l.kt)("h5",{id:"request-details"},"Request Details"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/call.png",alt:null})),(0,l.kt)("h5",{id:"user-authorizing-request"},"User Authorizing Request"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/call-confirm.png",alt:null})),(0,l.kt)("h3",{id:"signing-request"},"Signing Request"),(0,l.kt)("p",null,"Allows the app the ask the user to sign a message using their 1wallet. You may choose whether to add standard Ethereum signed message header to the message (see ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-191"},"EIP-191"),"). The signature will be verifiable using ",(0,l.kt)("inlineCode",{parentName:"p"},"isValidSignature(bytes32,bytes)")," method on 1wallet's contract, as described in ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-1271"},"EIP-1271"),"."),(0,l.kt)("h4",{id:"request-parameters-3"},"Request Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"message"),": a base64 encoded string of the message itself (not including the EIP-191 header)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"raw"),": (optional, defaults to false) a boolean string (",(0,l.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," indicates false value) indicating whether standard signing header (EIP-191) should be prepended to the message or not. If the value is true, the header would not be prepended"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"duration")," (optional) how long the signature should remain valid, in milliseconds. If unspecified, the signature will remain valid permanently."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"from"),": (optional) the address of the user's 1wallet which the signing ",(0,l.kt)("strong",{parentName:"li"},"must be")," done from. If the user does not have this 1wallet address, the request cannot proceed (thus the user must reject the request). If this parameter is unspecified, the user would be allowed to pick any 1wallet address they own to complete the payment request.")),(0,l.kt)("h4",{id:"callback-parameters-3"},"Callback Parameters"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"hash"),": the 32-byte keccak256 hash of the message (with or without header) which you provided, in hexidecimal representation (0x...)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"signature"),": the 32-byte signature of the 1wallet corresponds to the message, such that ",(0,l.kt)("inlineCode",{parentName:"li"},"isValidSignature(hash, signature)")," call on the 1wallet address will return true before the signature expires (valid for the duration you specified)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"txId"),": the transaction id of the call. Again, a successful transaction does not indicate 1wallet succesfully recorded the signature. You should call ",(0,l.kt)("inlineCode",{parentName:"li"},"isValidSignature(hash, signature)")," on the 1wallet to verify the signature is indeed valid, and optionally calling ",(0,l.kt)("inlineCode",{parentName:"li"},"lookupSignature(hash)")," to check the expiry time. You could also use ",(0,l.kt)("inlineCode",{parentName:"li"},"listSignatures(start, end)")," to show all the signatures on the 1wallet for debugging. If things went wrong, you could check the internal calls of the transaction and identify the relevant external calls to determine the cause. Possible events for a signing request are provided in ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/polymorpher/one-wallet/blob/daa1c1fca2c63c11f2252c871752bfdeb052e72a/code/contracts/SignatureManager.sol#L5"},"this section of the code"))),(0,l.kt)("h4",{id:"screenshots-3"},"Screenshots"),(0,l.kt)("h5",{id:"request-details-1"},"Request Details"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/sign.png",alt:null})),(0,l.kt)("h5",{id:"user-authorizing-request-1"},"User Authorizing Request"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/polymorpher/one-wallet/master/wiki/images/sign-confirm.png",alt:null})))}h.isMDXComponent=!0}}]);